# -*- coding: utf-8 -*-
"""CaloriesBurntPredictionModel.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pb8j4PaDeL4CR3SYBaa7LFIb2ub2o6rk

**importing the dependencies/libraries**
"""

import numpy as np                                        #numpy used to make arrays 
import pandas as pd                                       #pandas used to make dataframes(structured tables)
import matplotlib.pyplot as plt                           # matplolib and seaborn used to create plots and graphs(data visualization)
import seaborn as sns 
from sklearn.model_selection import train_test_split      #train test split function to split the dataset into data for training and data for testing
from xgboost import XGBRegressor                    
from sklearn import metrics                               #sklearn a machine learning lib , and metrics to evaluate our model.

"""**Data collection and processing**"""

# loading the data from csv(comma seprated) file to a pandas dataframe 
calories = pd.read_csv('/content/calories.csv')

#printing the first 5 row of dataframe to check
calories.head()

exercise_data = pd.read_csv('/content/exercise.csv')

exercise_data.head()

"""**Combining the two dataframes**"""

calories_data = pd.concat([exercise_data, calories['Calories']], axis=1)

calories_data.head()

#checking the number of rows and columns
calories_data.shape
# getting information about the data
calories_data.info()

#checking for missing/null values
calories_data.isnull().sum()

"""**Data Analysis**"""

#statistical information about the data 
calories_data.describe()

"""**Data Visualisation**"""

sns.set()

#plotting the gender column on countplot to check the distribution of male and female in our dataset
sns.countplot(calories_data['Gender'])
#countplots are useful for categorial data/values

# displaying the distribution of age column
sns.distplot(calories_data['Age'])

sns.distplot(calories_data['Calories'])

# displaying the distribution of height column
sns.distplot(calories_data['Height'])

# displaying the distribution of weight column
sns.distplot(calories_data['Weight'])

# displaying the distribution of heart rate column
sns.distplot(calories_data['Heart_Rate'])

"""**Finding the correlation of the Dataset**

Two types of correlation 

1.Positive correlation: if one attribute increases the other also increases example: more duration means more calories burnt(they are directly propotional)

2.Negative correlation: if one attribute increases the other decreases(they are inversely propotional)
"""

correlation= calories_data.corr()
#constructing a heatmap to understand the correlation 
plt.figure(figsize=(10,10))
sns.heatmap(correlation, cbar=True, square=True,fmt='.1f', annot=True, annot_kws={'size':8}, cmap='Blues')

"""heatmap gives colours based on the values and this value is calculated based on the relationship between the data. if the value is 1 the features/attributes of the data set are positively correlated and strongly correlated as the value decreases, it shows the correlation of atrributes is less and if value becomes 0 there is no correlation at all.

**Converting the text data of gender column to numerical value**
"""

calories_data.replace({"Gender":{'male':0, 'female':1}},inplace=True)

"""**Separating features and target (calories)**"""

X= calories_data.drop(columns=['User_ID','Calories'])          #dropping/removing these from the dataframe
Y= calories_data['Calories']                                   #just displaying calories in different dataframe

print(X)

print(Y)

"""**Splitting the data into training data and test data**"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y,  test_size=0.2 ,random_state=2)

print(X.shape, X_train.shape, X_test.shape)

"""**Model Training**

XGBoost Regressor
"""

# loading the model
model =  XGBRegressor ()

#training the model with X_train 
model.fit(X_train, Y_train)

"""**Model Evaluation**

Prediction on test data
"""

training_data_prediction= model.predict(X_train)

test_data_prediction= model.predict(X_test)

print(test_data_prediction)

r2_train= metrics.r2_score( Y_train, training_data_prediction)
print(r2_train)

r2_test= metrics.r2_score( Y_test, test_data_prediction)
print(r2_test)

"""**Mean Absolute Error**"""

mae = metrics.mean_absolute_error( Y_test, test_data_prediction)

print("Mean Absolute Error=", mae)

model.score( X_test,Y_test) *100

"""**Taking input and then predicting**"""

data= { 'Gender':1,
      'Age':39,
       'Height':175,
       'Weight':74,
       'Duration':16,
       'Heart_Rate':96,
       'Body_Temp':40.2}

df=pd.DataFrame(data,index=[0])
df

new_prediction= model.predict(df)
print(new_prediction)